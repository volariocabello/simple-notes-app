import {
  require_prop_types
} from "./chunk-KK5XZ6VE.js";
import {
  require_jsx_runtime
} from "./chunk-35YTY4EE.js";
import "./chunk-FH2XTGEL.js";
import {
  require_classnames
} from "./chunk-7JZCNSZL.js";
import {
  require_react
} from "./chunk-ZOIWZPCO.js";
import {
  __toESM
} from "./chunk-DFKQJ226.js";

// node_modules/react-edit-text/dist/index.modern.js
var import_classnames = __toESM(require_classnames());
var import_react = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_prop_types = __toESM(require_prop_types());
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var styles = { "label": "_4GdcU", "textareaView": "_G0k44", "shared": "_i5--j", "placeholder": "_TDklp", "inline": "_gmkRL", "readonly": "_-wzeg", "displayContainer": "_IYz6Z", "editButton": "_NGZSv" };
var _excluded$1 = ["props", "inputRef", "handleBlur", "handleKeydown", "handleFocus", "inputClassName"];
var Input = function Input2(_ref) {
  var _classnames;
  var _ref$props = _ref.props, id = _ref$props.id, inline = _ref$props.inline, style = _ref$props.style, type = _ref$props.type, name = _ref$props.name, inputRef = _ref.inputRef, handleBlur = _ref.handleBlur, handleKeydown = _ref.handleKeydown, handleFocus = _ref.handleFocus, inputClassName = _ref.inputClassName, rest = _objectWithoutPropertiesLoose(_ref, _excluded$1);
  return (0, import_jsx_runtime.jsx)("input", _extends({
    id,
    className: (0, import_classnames.default)(styles.shared, inputClassName, (_classnames = {}, _classnames[styles.inline] = inline, _classnames)),
    style,
    ref: inputRef,
    type,
    name,
    onBlur: handleBlur,
    onKeyDown: handleKeydown,
    autoFocus: true,
    onFocus: handleFocus
  }, rest));
};
var EditIcon = function EditIcon2() {
  return (0, import_jsx_runtime.jsx)("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 512 512",
    children: (0, import_jsx_runtime.jsx)("path", {
      d: "M421.7 220.3L188.5 453.4L154.6 419.5L158.1 416H112C103.2 416 96 408.8 96 400V353.9L92.51 357.4C87.78 362.2 84.31 368 82.42 374.4L59.44 452.6L137.6 429.6C143.1 427.7 149.8 424.2 154.6 419.5L188.5 453.4C178.1 463.8 165.2 471.5 151.1 475.6L30.77 511C22.35 513.5 13.24 511.2 7.03 504.1C.8198 498.8-1.502 489.7 .976 481.2L36.37 360.9C40.53 346.8 48.16 333.9 58.57 323.5L291.7 90.34L421.7 220.3zM492.7 58.75C517.7 83.74 517.7 124.3 492.7 149.3L444.3 197.7L314.3 67.72L362.7 19.32C387.7-5.678 428.3-5.678 453.3 19.32L492.7 58.75z"
    })
  });
};
var sharedDefaultProps = {
  id: void 0,
  name: void 0,
  className: void 0,
  value: void 0,
  formatDisplayText: function formatDisplayText(x) {
    return x;
  },
  defaultValue: void 0,
  placeholder: "",
  onSave: function onSave() {
  },
  onChange: function onChange() {
  },
  onEditMode: function onEditMode() {
  },
  onBlur: function onBlur() {
  },
  style: {},
  readonly: false,
  inputClassName: void 0
};
var sharedPropTypes = {
  id: import_prop_types.default.string,
  name: import_prop_types.default.string,
  className: import_prop_types.default.string,
  value: import_prop_types.default.string,
  formatDisplayText: import_prop_types.default.func,
  defaultValue: import_prop_types.default.string,
  placeholder: import_prop_types.default.string,
  onSave: import_prop_types.default.func,
  onChange: import_prop_types.default.func,
  onEditMode: import_prop_types.default.func,
  onBlur: import_prop_types.default.func,
  style: import_prop_types.default.oneOfType([import_prop_types.default.object, import_prop_types.default.array]),
  readonly: import_prop_types.default.bool,
  inputClassName: import_prop_types.default.string
};
var EditTextPropTypes = _extends({}, sharedPropTypes, {
  type: import_prop_types.default.string,
  inline: import_prop_types.default.bool,
  showEditButton: import_prop_types.default.bool,
  editButtonContent: import_prop_types.default.any,
  editButtonProps: import_prop_types.default.object
});
var EditTextDefaultProps = _extends({}, sharedDefaultProps, {
  type: "text",
  inline: false,
  showEditButton: false,
  editButtonContent: (0, import_jsx_runtime.jsx)(EditIcon, {}),
  editButtonProps: {}
});
var EditTextareaPropTypes = _extends({}, sharedPropTypes, {
  rows: import_prop_types.default.number
});
var EditTextareaDefaultProps = _extends({}, sharedDefaultProps, {
  rows: 3
});
function EditText(_ref) {
  var id = _ref.id, name = _ref.name, className = _ref.className, placeholder = _ref.placeholder, inline = _ref.inline, style = _ref.style, readonly = _ref.readonly, type = _ref.type, value = _ref.value, defaultValue = _ref.defaultValue, formatDisplayText2 = _ref.formatDisplayText, onEditMode2 = _ref.onEditMode, _onChange = _ref.onChange, onSave2 = _ref.onSave, onBlur2 = _ref.onBlur, showEditButton = _ref.showEditButton, editButtonContent = _ref.editButtonContent, editButtonProps = _ref.editButtonProps, inputClassName = _ref.inputClassName;
  var inputRef = import_react.default.useRef(null);
  var _React$useState = import_react.default.useState({}), changeEvent = _React$useState[0], setChangeEvent = _React$useState[1];
  var _React$useState2 = import_react.default.useState(""), previousValue = _React$useState2[0], setPreviousValue = _React$useState2[1];
  var _React$useState3 = import_react.default.useState(""), savedText = _React$useState3[0], setSavedText = _React$useState3[1];
  var _React$useState4 = import_react.default.useState(false), editMode = _React$useState4[0], setEditMode = _React$useState4[1];
  import_react.default.useEffect(function() {
    if (defaultValue !== void 0) {
      setPreviousValue(defaultValue);
      setSavedText(defaultValue);
    }
  }, [defaultValue]);
  import_react.default.useEffect(function() {
    if (value !== void 0) {
      setSavedText(value);
      if (!editMode) {
        setPreviousValue(value);
      }
    }
  }, [value, editMode]);
  var handleClickDisplay = function handleClickDisplay2() {
    if (readonly || showEditButton)
      return;
    setEditMode(true);
    onEditMode2();
  };
  var handleClickEditButton = function handleClickEditButton2() {
    setEditMode(true);
    onEditMode2();
  };
  var handleBlur = function handleBlur2(save) {
    if (save === void 0) {
      save = true;
    }
    if (inputRef.current) {
      var _inputRef$current = inputRef.current, inputName = _inputRef$current.name, inputValue = _inputRef$current.value;
      if (save && previousValue !== inputValue) {
        onSave2({
          name: inputName,
          value: inputValue,
          previousValue
        });
        setSavedText(inputValue);
        setPreviousValue(inputValue);
      } else if (!save) {
        _onChange(_extends({}, changeEvent, {
          target: changeEvent.target ? _extends({}, changeEvent.target, {
            value: previousValue
          }) : {
            value: previousValue
          }
        }));
      }
      setEditMode(false);
      onBlur2();
    }
  };
  var handleKeydown = function handleKeydown2(e) {
    if (e.keyCode === 13 || e.charCode === 13) {
      handleBlur();
    } else if (e.keyCode === 27 || e.charCode === 27) {
      handleBlur(false);
    }
  };
  var handleFocus = function handleFocus2(e) {
    if (type === "text") {
      e.currentTarget.setSelectionRange(e.currentTarget.value.length, e.currentTarget.value.length);
    }
  };
  var renderDisplayMode = function renderDisplayMode2() {
    var _classnames, _classnames2;
    return (0, import_jsx_runtime.jsxs)("div", {
      className: (0, import_classnames.default)(styles.displayContainer, (_classnames = {}, _classnames[styles.inline] = inline, _classnames)),
      children: [(0, import_jsx_runtime.jsx)("div", {
        id,
        className: (0, import_classnames.default)(styles.label, styles.shared, (_classnames2 = {}, _classnames2[styles.placeholder] = placeholder && !savedText, _classnames2[styles.inline] = inline, _classnames2[styles.readonly] = readonly || showEditButton, _classnames2), className),
        onClick: handleClickDisplay,
        style,
        "aria-label": "display component",
        children: formatDisplayText2(savedText) || placeholder
      }), showEditButton && !readonly && (0, import_jsx_runtime.jsx)("button", _extends({
        type: "button",
        className: styles.editButton
      }, editButtonProps, {
        onClick: handleClickEditButton,
        children: editButtonContent
      }))]
    });
  };
  var renderEditMode = function renderEditMode2(controlled) {
    var _sharedProps;
    var sharedProps = (_sharedProps = {
      inputRef,
      handleBlur,
      handleKeydown,
      handleFocus,
      props: {
        id,
        inline,
        style,
        type,
        name
      }
    }, _sharedProps["aria-label"] = "input component", _sharedProps);
    return controlled ? (0, import_jsx_runtime.jsx)(Input, _extends({}, sharedProps, {
      value,
      onChange: function onChange2(e) {
        setChangeEvent(e);
        _onChange(e);
      },
      inputClassName
    })) : (0, import_jsx_runtime.jsx)(Input, _extends({}, sharedProps, {
      defaultValue: savedText,
      inputClassName
    }));
  };
  return !readonly && editMode ? renderEditMode(value !== void 0 && _onChange !== void 0) : renderDisplayMode();
}
EditText.defaultProps = EditTextDefaultProps;
EditText.propTypes = EditTextPropTypes;
var _excluded = ["props", "inputRef", "handleBlur", "handleKeydown", "inputClassName"];
var Textarea = function Textarea2(_ref) {
  var _ref$props = _ref.props, id = _ref$props.id, rows = _ref$props.rows, style = _ref$props.style, name = _ref$props.name, inputRef = _ref.inputRef, handleBlur = _ref.handleBlur, handleKeydown = _ref.handleKeydown, inputClassName = _ref.inputClassName, rest = _objectWithoutPropertiesLoose(_ref, _excluded);
  return (0, import_jsx_runtime.jsx)("textarea", _extends({
    id,
    className: (0, import_classnames.default)(styles.shared, inputClassName),
    style,
    ref: inputRef,
    rows,
    name,
    onBlur: handleBlur,
    onKeyDown: handleKeydown,
    autoFocus: true,
    onFocus: function onFocus(e) {
      return e.currentTarget.setSelectionRange(e.currentTarget.value.length, e.currentTarget.value.length);
    }
  }, rest));
};
var splitLines = function splitLines2(val) {
  return val ? val.split(/\r?\n/) : [];
};
function EditTextarea(_ref) {
  var id = _ref.id, rows = _ref.rows, name = _ref.name, className = _ref.className, placeholder = _ref.placeholder, style = _ref.style, readonly = _ref.readonly, value = _ref.value, defaultValue = _ref.defaultValue, formatDisplayText2 = _ref.formatDisplayText, onEditMode2 = _ref.onEditMode, _onChange = _ref.onChange, onSave2 = _ref.onSave, onBlur2 = _ref.onBlur, inputClassName = _ref.inputClassName;
  var inputRef = import_react.default.useRef(null);
  var _React$useState = import_react.default.useState({}), changeEvent = _React$useState[0], setChangeEvent = _React$useState[1];
  var _React$useState2 = import_react.default.useState(""), previousValue = _React$useState2[0], setPreviousValue = _React$useState2[1];
  var _React$useState3 = import_react.default.useState(""), savedText = _React$useState3[0], setSavedText = _React$useState3[1];
  var _React$useState4 = import_react.default.useState(false), editMode = _React$useState4[0], setEditMode = _React$useState4[1];
  import_react.default.useEffect(function() {
    if (defaultValue !== void 0) {
      setPreviousValue(defaultValue);
      setSavedText(defaultValue);
    }
  }, [defaultValue]);
  import_react.default.useEffect(function() {
    if (value !== void 0) {
      setSavedText(value);
      if (!editMode) {
        setPreviousValue(value);
      }
    }
  }, [value, editMode]);
  var handleClick = function handleClick2() {
    if (readonly)
      return;
    setEditMode(true);
    onEditMode2();
  };
  var handleBlur = function handleBlur2(save) {
    if (save === void 0) {
      save = true;
    }
    if (inputRef.current) {
      var _inputRef$current = inputRef.current, inputName = _inputRef$current.name, inputValue = _inputRef$current.value;
      if (save && previousValue !== inputValue) {
        onSave2({
          name: inputName,
          value: inputValue,
          previousValue
        });
        setSavedText(inputValue);
        setPreviousValue(inputValue);
      } else if (!save) {
        _onChange(_extends({}, changeEvent, {
          target: changeEvent.target ? _extends({}, changeEvent.target, {
            value: previousValue
          }) : {
            value: previousValue
          }
        }));
      }
      setEditMode(false);
      onBlur2();
    }
  };
  var handleKeydown = function handleKeydown2(e) {
    if (e.keyCode === 27 || e.charCode === 27) {
      handleBlur(false);
    }
  };
  var renderDisplayMode = function renderDisplayMode2() {
    var _classnames;
    var textLines = splitLines(formatDisplayText2(savedText));
    return (0, import_jsx_runtime.jsx)("div", {
      id,
      className: (0, import_classnames.default)(styles.shared, styles.textareaView, (_classnames = {}, _classnames[styles.placeholder] = placeholder && !savedText, _classnames[styles.readonly] = readonly, _classnames), className),
      onClick: handleClick,
      style: _extends({}, style, {
        height: rows * 24 + 16 + "px"
      }),
      "aria-label": "display component",
      children: textLines.length > 0 ? textLines.map(function(text, index) {
        return (0, import_jsx_runtime.jsxs)(import_react.default.Fragment, {
          children: [(0, import_jsx_runtime.jsx)("span", {
            children: text
          }), (0, import_jsx_runtime.jsx)("br", {})]
        }, index);
      }) : (0, import_jsx_runtime.jsx)("span", {
        children: placeholder
      })
    });
  };
  var renderEditMode = function renderEditMode2(controlled) {
    var _sharedProps;
    var sharedProps = (_sharedProps = {
      inputRef,
      handleBlur,
      handleKeydown,
      props: {
        id,
        rows,
        style,
        name
      }
    }, _sharedProps["aria-label"] = "textarea component", _sharedProps);
    return controlled ? (0, import_jsx_runtime.jsx)(Textarea, _extends({}, sharedProps, {
      value,
      onChange: function onChange2(e) {
        setChangeEvent(e);
        _onChange(e);
      },
      inputClassName
    })) : (0, import_jsx_runtime.jsx)(Textarea, _extends({}, sharedProps, {
      defaultValue: savedText,
      inputClassName
    }));
  };
  return !readonly && editMode ? renderEditMode(value !== void 0 && _onChange !== void 0) : renderDisplayMode();
}
EditTextarea.defaultProps = EditTextareaDefaultProps;
EditTextarea.propTypes = EditTextareaPropTypes;
export {
  EditText,
  EditTextarea
};
//# sourceMappingURL=react-edit-text.js.map
